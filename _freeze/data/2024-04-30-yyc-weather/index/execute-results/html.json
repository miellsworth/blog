{
  "hash": "70a7a9817ccffd37c17f35774644a71d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"YYC weather\"\ndescription: |\n  Some weather viz\ndate: 2024-04-30\n---\n\n\nIt's April 30th, 2024 and it snowed today. A lot. It snowed a lot. This inspired me to look at the Government of Canada's weather records for Calgary to see what data I could explore. This led me to [Almanac Averages & Extremes](https://climate.weather.gc.ca/climate_data/almanac_e.html?month=4&day=30&StationID=2205&period=1&searchMethod=contains&txtStationName=calgary). Let's take a look at the downloadable data!\n\n\n::: {.cell warnings='false'}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lubridate'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 366 Columns: 33\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): Station Name, Highest Temp. Period, Lowest Temp. Period, Greatest ...\ndbl (20): Longitude (x), Latitude (y), Climate ID, Month, Day, Average Max. ...\nlgl  (6): Highest Temp. Data Quality, Lowest Temp. Data Quality, Greatest Pr...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 366 × 33\n   longitude_x latitude_y station_name climate_id month   day average_max_temp_c\n         <dbl>      <dbl> <chr>             <dbl> <dbl> <dbl>              <dbl>\n 1       -114.       51.1 CALGARY INT…    3031093     1     1               -2.7\n 2       -114.       51.1 CALGARY INT…    3031093     1     2               -2.7\n 3       -114.       51.1 CALGARY INT…    3031093     1     3               -2.8\n 4       -114.       51.1 CALGARY INT…    3031093     1     4               -2.9\n 5       -114.       51.1 CALGARY INT…    3031093     1     5               -2.9\n 6       -114.       51.1 CALGARY INT…    3031093     1     6               -3  \n 7       -114.       51.1 CALGARY INT…    3031093     1     7               -3  \n 8       -114.       51.1 CALGARY INT…    3031093     1     8               -3  \n 9       -114.       51.1 CALGARY INT…    3031093     1     9               -3.1\n10       -114.       51.1 CALGARY INT…    3031093     1    10               -3.1\n# ℹ 356 more rows\n# ℹ 26 more variables: average_min_temp_c <dbl>,\n#   frequency_of_precip_percent <dbl>, highest_temp_c <dbl>,\n#   highest_temp_year <dbl>, highest_temp_period <chr>,\n#   highest_temp_data_quality <lgl>, lowest_temp_c <dbl>,\n#   lowest_temp_year <dbl>, lowest_temp_period <chr>,\n#   lowest_temp_data_quality <lgl>, greatest_precip_mm <dbl>, …\n```\n\n\n:::\n:::\n\n\nLooks like we have some weather records on our hands! Let's take a look at April 30th to see what type of extremes we have dealt with on this day in the past.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  filter(month == 4, day == 30) %>%\n  select(\n    matches(\"average\"), \n    matches(\"highest\"), \n    matches(\"lowest\"), \n    matches(\"greatest\"),\n    matches(\"most\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 26\n  average_max_temp_c average_min_temp_c highest_temp_c highest_temp_year\n               <dbl>              <dbl>          <dbl>             <dbl>\n1               14.2                0.7           25.6              1941\n# ℹ 22 more variables: highest_temp_period <chr>,\n#   highest_temp_data_quality <lgl>, lowest_temp_c <dbl>,\n#   lowest_temp_year <dbl>, lowest_temp_period <chr>,\n#   lowest_temp_data_quality <lgl>, greatest_precip_mm <dbl>,\n#   greatest_precip_year <dbl>, greatest_precip_period <chr>,\n#   greatest_precip_data_quality <lgl>, greatest_rainfall_mm <dbl>,\n#   greatest_rainfall_year <dbl>, greatest_rainfall_period <chr>, …\n```\n\n\n:::\n:::\n\n\nI'm curious to compare these with today's conditions but we don't have that data yet. Let's come back to April 30th, perhaps tomorrow. In the meantime, let's take a look at April 29th! We had a bit of rain and snow yesterday so let's compare that to some historical records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_2024_04_29 <- df %>%\n  filter(month == 4, day == 29) %>%\n  select(\n    matches(\"average\"), \n    matches(\"highest\"), \n    matches(\"lowest\"), \n    matches(\"greatest\"),\n    matches(\"most\")\n  )\n\ndaily_report_url <- \"https://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=csv&stationID=50430&Year=2024&Month=4&Day=1&time=&timeframe=2&submit=Download+Data\"\n\ndf_2024 <- read_csv(daily_report_url) %>%\n  janitor::clean_names() %>%\n  mutate(date_time = lubridate::ymd(date_time))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 366 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): Station Name, Month, Day, Max Temp Flag, Min Temp Flag, Mean Temp...\ndbl  (15): Longitude (x), Latitude (y), Climate ID, Year, Max Temp (°C), Min...\nlgl   (2): Data Quality, Total Precip Flag\ndate  (1): Date/Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}